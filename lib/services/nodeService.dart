import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:encrypt/encrypt.dart';
import 'package:encrypt/encrypt.dart' as encrypt;
import 'dart:core';

import 'package:convert/convert.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

//import 'package:flutter_js/flutter_js.dart';
import 'package:http/http.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:web3dart/crypto.dart';
import 'package:web3dart/web3dart.dart';
import 'package:web_socket_channel/io.dart';
import 'package:http/http.dart' as http;

class NodeService {
  bool isLoading = true;

  // final String _rpcUrl = "https://goerli-rollup.arbitrum.io/rpc";
  // final String _wsUrl = "ws://goerli-rollup.arbitrum.io/rpc/";

  final String _rpcUrl = "http://127.0.0.1:7545";
  final String _wsUrl = "ws://127.0.0.1:7545";

  final String _privateKey =
      "cf616ab0ac08e4fc00766afa4e3a96e27d8359ea31b633eabbabd7dd679e7a43";

  late Web3Client _client;
  late String _abiCode;

  late Credentials _credentials;
  late EthereumAddress _contractAddress;
  late DeployedContract _contract;

  late ContractFunction _notesCount;
  late ContractFunction _notes;
  late ContractFunction _addNote;
  late ContractFunction _deleteNote;
  late ContractFunction _editNote;
  late ContractEvent _noteAddedEvent;
  late ContractEvent _noteDeletedEvent;

  // JavascriptRuntime runtime = getJavascriptRuntime();
  //
  // dynamic path = rootBundle.loadString("assets/deployContract.js");

  NodeService() {
    init();
  }

  init() async {
    _client = Web3Client(_rpcUrl, Client(), socketConnector: () {
      return IOWebSocketChannel.connect(_wsUrl).cast<String>();
    });
    await getAbi();
    await getCreadentials();
    await getDeployedContract();
  }

  Future<void> getAbi() async {
    String abiStringFile =
        await rootBundle.loadString("contracts/build/contracts/Node.json");
    var jsonAbi = jsonDecode(abiStringFile);
    _abiCode = jsonEncode(jsonAbi['abi']);
    // _contractAddress = EthereumAddress.fromHex(jsonAbi["networks"]["421613"]["address"]);
    _contractAddress =
        EthereumAddress.fromHex("0xBaB9A24e9Cf966Ad8B3Eb34D405234531B221E39");
  }

  Future<void> getCreadentials() async {
    _credentials = await _client.credentialsFromPrivateKey(_privateKey);
  }

  Future<void> getDeployedContract() async {
    _contract = DeployedContract(
        ContractAbi.fromJson(_abiCode, "Node"), _contractAddress);
    print("Node contract initiated  " + _contract.address.toString());
  }

  // state changing function
  Future<String> callFunction(
      String funcname, List<dynamic> args, String privateKey) async {
    EthPrivateKey credentials = EthPrivateKey.fromHex(privateKey);
    DeployedContract contract = _contract;
    final ethFunction = contract.function(funcname);
    final result = await _client.sendTransaction(
        credentials,
        Transaction.callContract(
          contract: contract,
          function: ethFunction,
          parameters: args,
        ),
        chainId: null,
        fetchChainIdFromNetworkId: true);
    return result;
  }

  //non state change function
  Future<List<dynamic>> ask(String funcName, List<dynamic> args) async {
    final contract = _contract;
    final ethFunction = contract.function(funcName);
    final result = _client.call(
        sender: _credentials.address,
        contract: contract,
        function: ethFunction,
        params: args);
    return result;
  }

  // //function calling in node service
  // Future<void> getUserName() async {
  //   var res = await ask("getUserName", []);
  //   print(res);
  // }

  Future<void> addTempShareHolder() async {
    var res = await callFunction(
        "addTemporaryShareHolders",
        [EthereumAddress.fromHex("0x7400cC042F87Acb0CbC973C9655F986DCD72B869")],
        _privateKey);
    print(res);
  }

  Future<void> setEmail(String email) async {
    var res = await callFunction("setEmail", [email], _privateKey);
    print(res);
  }

  Future<void> makeTransaction() async {
    await _client.sendTransaction(
        _credentials,
        Transaction(
          to: EthereumAddress.fromHex(
              '0x7400cC042F87Acb0CbC973C9655F986DCD72B869'),
          gasPrice: EtherAmount.inWei(BigInt.one),
          maxGas: 100000,
          value: EtherAmount.fromUnitAndValue(EtherUnit.wei, 1),
        ),
        chainId: 5);
    print("transaction completed");
  }

  Future<void> deploy() async {
    String url =
        "https://6f75-112-134-24-139.ngrok-free.app/node-contract/deploy";
    var map = new Map<String, dynamic>();
    map['prv'] =
        '58d0efedba9a8a61b2ac3f188dd079782e07aed904cdbc0e3340e073e85c7655';
    map['pub'] = '0x20543FD8D854d500121215Abc542531987f6bc2e';
    var uri =
        Uri.https('6f75-112-134-24-139.ngrok-free.app', 'node-contract/deploy');
    final response = await http.post(uri, body: map);
    print(response);
    var responseData = json.decode(response.body);
    print(responseData);

    return;
  }

  // Future<void> register()async{
  //   var res = await callFunction(
  //       "registerToPublicContract",
  //       ["Alice"],
  //       _privateKey);
  //   print(res);
  //
  //   return;
  // }
  Future<void> makeHolderRequests() async {
    var res = await callFunction("makingHolderRequests", [], _privateKey);
    print(res);

    return;
  }

  Future<void> addShares() async {
    var res = await callFunction(
        "addMyShares",
        [
          ["Share1", "Share2", "Share3"]
        ],
        _privateKey);
    print(res);
    return;
  }

  Future<void> refreshStatus() async {
    var res = await callFunction("refreshState", [], _privateKey);
    print(res);
    return;
  }

  Future<void> getState() async {
    // var res = await ask("getMyState", []);
    // print(res);
    var res = await ask(
      "getMyState",
      [],
      //_privateKey
    );
    print(res);
    return;
  }

  Future<void> getShareHolderStatus() async {
    var requestdHolders = await ask(
      "getRequestedShareHolders",
      [],
      //_privateKey
    );
    //var real=_client.getTransactionByHash(requestdHolders);

    print(requestdHolders);
    var acceptedHolders = await ask(
      "getShareHolders",
      [],
      //_privateKey
    );
    print(acceptedHolders);
    var rejectedHolders = await ask(
      "getRejectedShareHolders",
      [],
      //_privateKey
    );
    print(rejectedHolders);
    return;
  }

  Future<void> distribute() async {
    var res =
        await callFunction("distribute", ["email", "vaultHash"], _privateKey);
    print(res);
    return;
  }

  Uint8List hexToBytes(String hexStr) {
    final bytes = hex.decode(strip0x(hexStr));
    if (bytes is Uint8List) return bytes;

    return Uint8List.fromList(bytes);
  }

  // Future<void> requestForShares()async{
  //   // Uint8List vBytes = Uint8List.fromList([12]);
  //   // Uint8List rBytes = Uint8List.fromList(hexToBytes("r"));
  //   var res = await callFunction(
  //       "requestSharesFromHolders",
  //       ["string memory name",Uint8List(10), Uint8List(10), Uint8List(10),Uint8List(10),Uint8List(10)],
  //       _privateKey);
  //   print(res);
  //
  //   var result = await callFunction(
  //       "setRequester",
  //       [EthereumAddress.fromHex('0x7400cC042F87Acb0CbC973C9655F986DCD72B869')],
  //       _privateKey);
  //   print(result);
  //   return;
  // }
  Future<void> requestForShares() async {
    String url =
        "https://6f75-112-134-24-139.ngrok-free.app/node-contract/deploy";
    var map = new Map<String, dynamic>();
    map['prv'] =
        'ec754553254fd6b9bcfa929e27d378b648b4ac8adf926b0663e41e13c03c174d';
    map['pub'] = '0x1c36c98DC9b260564F17817241fED3BBA1402059';
    map['contract'] = '0x6fe32ACEEaf2300C46Eb48E1DB07d0924d30baBB';
    map['username'] = 'Tim';
    map['generatedOTP'] = '123';
    map['enteredOTP'] = '123';
    var uri = Uri.https('6f75-112-134-24-139.ngrok-free.app',
        'node-contract/request-vault-hash');
    final response = await http.post(uri, body: map);
    print(response);
    var responseData = json.decode(response.body);
    print(responseData);

    return;
  }

  Future<void> acceptInvitation() async {
    var res = await callFunction(
        "acceptInvitation",
        [EthereumAddress.fromHex('0x7400cC042F87Acb0CbC973C9655F986DCD72B869')],
        _privateKey);
    print(res);
    return;
  }

  Future<void> rejectInvitation() async {
    var res = await callFunction(
        "rejectInvitation",
        [EthereumAddress.fromHex('0x7400cC042F87Acb0CbC973C9655F986DCD72B869')],
        _privateKey);
    print(res);
    return;
  }

  Future<void> checkRequestsForShare() async {
    var requesters = await ask(
      "checkRequestsForShare",
      [],
      //_privateKey
    );
    print(requesters);

    return;
  }

  Future<void> releaseSecret() async {
    var res = await callFunction(
        "releaseSecret",
        [EthereumAddress.fromHex('0x7400cC042F87Acb0CbC973C9655F986DCD72B869')],
        _privateKey);
    print(res);
    return;
  }

  Future<List<int>> convertImageToBytes(File imageFile) async {
    return imageFile.readAsBytesSync();
  }

  String encryptImage(List<int> imageData) {
    final key = encrypt.Key.fromUtf8(
        'YourEncryptionKey'); // Replace with your encryption key
    final iv = IV.fromLength(16);

    final encrypter = Encrypter(AES(key));

    final encrypted = encrypter.encryptBytes(imageData, iv: iv);

    return encrypted.base64;
  }

  Future<void> sendEncryptedImage() async {
    File imageFile = File("C:/Users/Sandaru Kaveesha/Pictures/cover3.jpg");
    // var uri = Uri.https('5a6d-112-134-24-231.ngrok-free.app', 'node-contract/get-fingerprint');
    // final response = await http.post(uri);
    final imageData = await convertImageToBytes(imageFile);
    print(imageData);
    final encryptedImage = encryptImage(imageData);
    print(encryptedImage);
    // var request = http.MultipartRequest('POST', Uri.parse(' https://5a6d-112-134-24-231.ngrok-free.app/node-contract/get-fingerprint'));
    //
    // request.fields['image'] = encryptedImage;
    //
    // // Add any additional data or headers if required
    // request.fields['key'] = 'value';
    //
    // var response = await request.send();
    // if (response.statusCode == 200) {
    //   // Success
    // } else {
    //   // Handle error
    // }
  }

//still in testing phase
  // Future<void> deploy() async {
  //   final prefs = await SharedPreferences.getInstance();
  //   //final privateKey = prefs.getString('3d789a56b97933f50f9ea622a0ea95982823b2dcb6f248b58b5aff3872f247e7') ?? '3d789a56b97933f50f9ea622a0ea95982823b2dcb6f248b58b5aff3872f247e7';
  //
  //   // final client = Web3Client(_rpcUrl, _cl);
  //   final credential = EthPrivateKey.fromHex(_privateKey);
  //   print(credential.address);
  //
  //   var list = utf8.encode(
  //       "60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050608051613eda61006760003960008181610b9f0152611a700152613eda6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806380e2412d116100b8578063bc9d62711161007c578063bc9d6271146103e3578063c5882344146103ff578063c6244a271461042f578063cc2f22f11461044b578063d71e80e314610467578063ec6ea3aa1461049757610142565b806380e2412d1461030757806382760fca1461033757806399f8b09f146103675780639c11155914610397578063a5311bcf146103b357610142565b806367e37f701161010a57806367e37f70146102235780636e8548bb1461025357806374cf3e511461026f5780637568708f1461029f5780637915c069146102cf5780637cbfc58f146102eb57610142565b806309da40ae146101475780630d85d8391461017757806314338f9d146101a757806354f5fcba146101d757806356da5eea14610207575b600080fd5b610161600480360381019061015c9190613083565b6104b3565b60405161016e91906130e5565b60405180910390f35b610191600480360381019061018c91906131b5565b6106de565b60405161019e9190613219565b60405180910390f35b6101c160048036038101906101bc9190613234565b610767565b6040516101ce91906130e5565b60405180910390f35b6101f160048036038101906101ec9190613234565b6108c0565b6040516101fe91906130e5565b60405180910390f35b610221600480360381019061021c91906132d0565b610a19565b005b61023d600480360381019061023891906131b5565b610d43565b60405161024a919061340d565b60405180910390f35b61026d6004803603810190610268919061342f565b610ea4565b005b61028960048036038101906102849190613234565b610faa565b60405161029691906130e5565b60405180910390f35b6102b960048036038101906102b49190613234565b611103565b6040516102c6919061352d565b60405180910390f35b6102e960048036038101906102e4919061354f565b6114b3565b005b610305600480360381019061030091906135be565b611674565b005b610321600480360381019061031c919061361a565b611923565b60405161032e919061340d565b60405180910390f35b610351600480360381019061034c91906131b5565b611b51565b60405161035e91906136f2565b60405180910390f35b610381600480360381019061037c9190613234565b611c3b565b60405161038e919061352d565b60405180910390f35b6103b160048036038101906103ac919061342f565b611e3e565b005b6103cd60048036038101906103c89190613234565b6120cd565b6040516103da919061371c565b60405180910390f35b6103fd60048036038101906103f89190613763565b612135565b005b61041960048036038101906104149190613083565b61243d565b604051610426919061352d565b60405180910390f35b6104496004803603810190610444919061342f565b61270e565b005b610465600480360381019061046091906137b6565b6127e7565b005b610481600480360381019061047c9190613234565b6128c3565b60405161048e919061352d565b60405180910390f35b6104b160048036038101906104ac9190613851565b612c73565b005b6000806000905060005b83518110156106d45760008482815181106104db576104da61387e565b5b6020026020010151905060005b6003805490508110156106bf5760006003828154811061050b5761050a61387e565b5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461058a906138dc565b80601f01602080910402602001604051908101604052809291908181526020018280546105b6906138dc565b80156106035780601f106105d857610100808354040283529160200191610603565b820191906000526020600020905b8154815290600101906020018083116105e657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508273ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16036106ab576001856106a8919061393c565b94505b5080806106b790613970565b9150506104e8565b505080806106cc90613970565b9150506104bd565b5080915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1660018360405161070791906139f4565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361075d5760009050610762565b600190505b919050565b6000806000905060005b6005805490508110156108b6576000600582815481106107945761079361387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508473ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036108a25760018361089f919061393c565b92505b5080806108ae90613970565b915050610771565b5080915050919050565b6000806000905060005b600480549050811015610a0f576000600482815481106108ed576108ec61387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508473ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036109fb576001836109f8919061393c565b92505b508080610a0790613970565b9150506108ca565b5080915050919050565b6000600188604051610a2b91906139f4565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081602001519050600060405180606001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018b8152602001846000015173ffffffffffffffffffffffffffffffffffffffff168152509050600060018989898960405160008152602001604052604051610b6f9493929190613a29565b6020604051602081039080840390855afa158015610b91573d6000803e3d6000fd5b5050506020604051035190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d3657848903610d3557600382908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610c7f9190613c1a565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508273ffffffffffffffffffffffffffffffffffffffff1663227a30c5336040518263ffffffff1660e01b8152600401610d02919061371c565b600060405180830381600087803b158015610d1c57600080fd5b505af1158015610d30573d6000803e3d6000fd5b505050505b5b5050505050505050505050565b60606000600183604051610d5791906139f4565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816020015190508073ffffffffffffffffffffffffffffffffffffffff1663c4382fa66040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e72573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e9b9190613d5c565b92505050919050565b600060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152509050600281908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000806000905060005b6002805490508110156110f957600060028281548110610fd757610fd661387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508473ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16036110e5576001836110e2919061393c565b92505b5080806110f190613970565b915050610fb4565b5080915050919050565b6060600061111083610767565b90506000808267ffffffffffffffff81111561112f5761112e612ee2565b5b60405190808252806020026020018201604052801561115d5781602001602082028036833780820191505090505b50905060005b6005805490508110156112fa576000600582815481106111865761118561387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508673ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036112e657806020015183858151811061129c5761129b61387e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001846112e3919061393c565b93505b5080806112f290613970565b915050611163565b5060005b6005805490508110156114a7576000600582815481106113215761132061387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508673ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff160361149357600582815481106114335761143261387e565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505b50808061149f90613970565b9150506112fe565b50809350505050919050565b6114bc836106de565b156114fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f390613df1565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152509050806001856040516115cf91906139f4565b908152602001604051809103902060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050505050565b60005b60038054905081101561191e5760006003828154811061169a5761169961387e565b5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054611719906138dc565b80601f0160208091040260200160405190810160405280929190818152602001828054611745906138dc565b80156117925780601f1061176757610100808354040283529160200191611792565b820191906000526020600020905b81548152906001019060200180831161177557829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508373ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff160361190a5760008160000151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff1663d65ec855876040518263ffffffff1660e01b81526004016118d4919061340d565b600060405180830381600087803b1580156118ee57600080fd5b505af1158015611902573d6000803e3d6000fd5b505050505050505b50808061191690613970565b915050611677565b505050565b6060600060018860405161193791906139f4565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816020015190506000604051806020016040528060008152509050600060018a8a8a8a60405160008152602001604052604051611a409493929190613a29565b6020604051602081039080840390855afa158015611a62573d6000803e3d6000fd5b5050506020604051035190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b4057858a03611b3f578273ffffffffffffffffffffffffffffffffffffffff166357a460796040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b13573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b3c9190613d5c565b91505b5b819450505050509695505050505050565b611b59612e15565b6000600183604051611b6b91906139f4565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080915050919050565b60606000611c4883610faa565b90506000808267ffffffffffffffff811115611c6757611c66612ee2565b5b604051908082528060200260200182016040528015611c955781602001602082028036833780820191505090505b50905060005b600280549050811015611e3257600060028281548110611cbe57611cbd61387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508673ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603611e1e578060000151838581518110611dd457611dd361387e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600184611e1b919061393c565b93505b508080611e2a90613970565b915050611c9b565b50809350505050919050565b60005b6003805490508110156120c857600060038281548110611e6457611e6361387e565b5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054611ee3906138dc565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0f906138dc565b8015611f5c5780601f10611f3157610100808354040283529160200191611f5c565b820191906000526020600020905b815481529060010190602001808311611f3f57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614801561202b57508273ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16145b156120b457600382815481106120445761204361387e565b5b9060005260206000209060030201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600061208a9190612e5b565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505b5080806120c090613970565b915050611e41565b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60005b6002805490508110156124375760006002828154811061215b5761215a61387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508473ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614801561229057508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16145b156124235761229e82612c73565b821561236557600481908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050612422565b600581908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b5b50808061242f90613970565b915050612138565b50505050565b6060600061244a836104b3565b90506000808267ffffffffffffffff81111561246957612468612ee2565b5b6040519080825280602002602001820160405280156124975781602001602082028036833780820191505090505b50905060005b85518110156127025760008682815181106124bb576124ba61387e565b5b6020026020010151905060005b6003805490508110156126ed576000600382815481106124eb576124ea61387e565b5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461256a906138dc565b80601f0160208091040260200160405190810160405280929190818152602001828054612596906138dc565b80156125e35780601f106125b8576101008083540402835291602001916125e3565b820191906000526020600020905b8154815290600101906020018083116125c657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508273ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16036126d9578285878151811061268f5761268e61387e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001866126d6919061393c565b95505b5080806126e590613970565b9150506124c8565b505080806126fa90613970565b91505061249d565b50809350505050919050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff16631965a285846040518263ffffffff1660e01b81526004016127af919061371c565b600060405180830381600087803b1580156127c957600080fd5b505af11580156127dd573d6000803e3d6000fd5b5050505050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff16634a9ae94a86856040518363ffffffff1660e01b815260040161288a929190613e11565b600060405180830381600087803b1580156128a457600080fd5b505af11580156128b8573d6000803e3d6000fd5b505050505050505050565b606060006128d0836108c0565b90506000808267ffffffffffffffff8111156128ef576128ee612ee2565b5b60405190808252806020026020018201604052801561291d5781602001602082028036833780820191505090505b50905060005b600480549050811015612aba576000600482815481106129465761294561387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508673ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1603612aa6578060200151838581518110612a5c57612a5b61387e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600184612aa3919061393c565b93505b508080612ab290613970565b915050612923565b5060005b600480549050811015612c6757600060048281548110612ae157612ae061387e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508673ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1603612c535760048281548110612bf357612bf261387e565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505b508080612c5f90613970565b915050612abe565b50809350505050919050565b60026001600280549050612c879190613e41565b81548110612c9857612c9761387e565b5b906000526020600020906002020160028281548110612cba57612cb961387e565b5b90600052602060002090600202016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506002805480612dab57612daa613e75565b5b6001900381819060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050905550565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b508054612e67906138dc565b6000825580601f10612e795750612e98565b601f016020900490600052602060002090810190612e979190612e9b565b5b50565b5b80821115612eb4576000816000905550600101612e9c565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f1a82612ed1565b810181811067ffffffffffffffff82111715612f3957612f38612ee2565b5b80604052505050565b6000612f4c612eb8565b9050612f588282612f11565b919050565b600067ffffffffffffffff821115612f7857612f77612ee2565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fb982612f8e565b9050919050565b612fc981612fae565b8114612fd457600080fd5b50565b600081359050612fe681612fc0565b92915050565b6000612fff612ffa84612f5d565b612f42565b9050808382526020820190506020840283018581111561302257613021612f89565b5b835b8181101561304b57806130378882612fd7565b845260208401935050602081019050613024565b5050509392505050565b600082601f83011261306a57613069612ecc565b5b813561307a848260208601612fec565b91505092915050565b60006020828403121561309957613098612ec2565b5b600082013567ffffffffffffffff8111156130b7576130b6612ec7565b5b6130c384828501613055565b91505092915050565b6000819050919050565b6130df816130cc565b82525050565b60006020820190506130fa60008301846130d6565b92915050565b600080fd5b600067ffffffffffffffff8211156131205761311f612ee2565b5b61312982612ed1565b9050602081019050919050565b82818337600083830152505050565b600061315861315384613105565b612f42565b90508281526020810184848401111561317457613173613100565b5b61317f848285613136565b509392505050565b600082601f83011261319c5761319b612ecc565b5b81356131ac848260208601613145565b91505092915050565b6000602082840312156131cb576131ca612ec2565b5b600082013567ffffffffffffffff8111156131e9576131e8612ec7565b5b6131f584828501613187565b91505092915050565b60008115159050919050565b613213816131fe565b82525050565b600060208201905061322e600083018461320a565b92915050565b60006020828403121561324a57613249612ec2565b5b600061325884828501612fd7565b91505092915050565b6000819050919050565b61327481613261565b811461327f57600080fd5b50565b6000813590506132918161326b565b92915050565b600060ff82169050919050565b6132ad81613297565b81146132b857600080fd5b50565b6000813590506132ca816132a4565b92915050565b600080600080600080600060e0888a0312156132ef576132ee612ec2565b5b600088013567ffffffffffffffff81111561330d5761330c612ec7565b5b6133198a828b01613187565b975050602061332a8a828b01612fd7565b965050604061333b8a828b01613282565b955050606061334c8a828b016132bb565b945050608061335d8a828b01613282565b93505060a061336e8a828b01613282565b92505060c061337f8a828b01613282565b91505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b60005b838110156133c85780820151818401526020810190506133ad565b60008484015250505050565b60006133df8261338e565b6133e98185613399565b93506133f98185602086016133aa565b61340281612ed1565b840191505092915050565b6000602082019050818103600083015261342781846133d4565b905092915050565b6000806040838503121561344657613445612ec2565b5b600061345485828601612fd7565b925050602061346585828601612fd7565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6134a481612fae565b82525050565b60006134b6838361349b565b60208301905092915050565b6000602082019050919050565b60006134da8261346f565b6134e4818561347a565b93506134ef8361348b565b8060005b8381101561352057815161350788826134aa565b9750613512836134c2565b9250506001810190506134f3565b5085935050505092915050565b6000602082019050818103600083015261354781846134cf565b905092915050565b60008060006060848603121561356857613567612ec2565b5b600084013567ffffffffffffffff81111561358657613585612ec7565b5b61359286828701613187565b93505060206135a386828701612fd7565b92505060406135b486828701612fd7565b9150509250925092565b600080604083850312156135d5576135d4612ec2565b5b60006135e385828601612fd7565b925050602083013567ffffffffffffffff81111561360457613603612ec7565b5b61361085828601613187565b9150509250929050565b60008060008060008060c0878903121561363757613636612ec2565b5b600087013567ffffffffffffffff81111561365557613654612ec7565b5b61366189828a01613187565b965050602061367289828a01613282565b955050604061368389828a016132bb565b945050606061369489828a01613282565b93505060806136a589828a01613282565b92505060a06136b689828a01613282565b9150509295509295509295565b6040820160008201516136d9600085018261349b565b5060208201516136ec602085018261349b565b50505050565b600060408201905061370760008301846136c3565b92915050565b61371681612fae565b82525050565b6000602082019050613731600083018461370d565b92915050565b613740816131fe565b811461374b57600080fd5b50565b60008135905061375d81613737565b92915050565b60008060006060848603121561377c5761377b612ec2565b5b600061378a86828701612fd7565b935050602061379b86828701612fd7565b92505060406137ac8682870161374e565b9150509250925092565b6000806000606084860312156137cf576137ce612ec2565b5b60006137dd86828701612fd7565b93505060206137ee86828701612fd7565b925050604084013567ffffffffffffffff81111561380f5761380e612ec7565b5b61381b86828701613187565b9150509250925092565b61382e816130cc565b811461383957600080fd5b50565b60008135905061384b81613825565b92915050565b60006020828403121561386757613866612ec2565b5b60006138758482850161383c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806138f457607f821691505b602082108103613907576139066138ad565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613947826130cc565b9150613952836130cc565b925082820190508082111561396a5761396961390d565b5b92915050565b600061397b826130cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139ad576139ac61390d565b5b600182019050919050565b600081905092915050565b60006139ce8261338e565b6139d881856139b8565b93506139e88185602086016133aa565b80840191505092915050565b6000613a0082846139c3565b915081905092915050565b613a1481613261565b82525050565b613a2381613297565b82525050565b6000608082019050613a3e6000830187613a0b565b613a4b6020830186613a1a565b613a586040830185613a0b565b613a656060830184613a0b565b95945050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613ad07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613a93565b613ada8683613a93565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613b17613b12613b0d846130cc565b613af2565b6130cc565b9050919050565b6000819050919050565b613b3183613afc565b613b45613b3d82613b1e565b848454613aa0565b825550505050565b600090565b613b5a613b4d565b613b65818484613b28565b505050565b5b81811015613b8957613b7e600082613b52565b600181019050613b6b565b5050565b601f821115613bce57613b9f81613a6e565b613ba884613a83565b81016020851015613bb7578190505b613bcb613bc385613a83565b830182613b6a565b50505b505050565b600082821c905092915050565b6000613bf160001984600802613bd3565b1980831691505092915050565b6000613c0a8383613be0565b9150826002028217905092915050565b613c238261338e565b67ffffffffffffffff811115613c3c57613c3b612ee2565b5b613c4682546138dc565b613c51828285613b8d565b600060209050601f831160018114613c845760008415613c72578287015190505b613c7c8582613bfe565b865550613ce4565b601f198416613c9286613a6e565b60005b82811015613cba57848901518255600182019150602085019450602081019050613c95565b86831015613cd75784890151613cd3601f891682613be0565b8355505b6001600288020188555050505b505050505050565b6000613cff613cfa84613105565b612f42565b905082815260208101848484011115613d1b57613d1a613100565b5b613d268482856133aa565b509392505050565b600082601f830112613d4357613d42612ecc565b5b8151613d53848260208601613cec565b91505092915050565b600060208284031215613d7257613d71612ec2565b5b600082015167ffffffffffffffff811115613d9057613d8f612ec7565b5b613d9c84828501613d2e565b91505092915050565b7f4e616d6520616c72656164792065786973747300000000000000000000000000600082015250565b6000613ddb601383613399565b9150613de682613da5565b602082019050919050565b60006020820190508181036000830152613e0a81613dce565b9050919050565b6000604082019050613e26600083018561370d565b8181036020830152613e3881846133d4565b90509392505050565b6000613e4c826130cc565b9150613e57836130cc565b9250828203905081811115613e6f57613e6e61390d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220aae50f1e4fb30e2e6334bc96a93c09981d354fe6f223e13ec2156efe7450ea8064736f6c63430008120033");
  //   Uint8List payload = Uint8List.fromList(list);
  //   final Transaction transaction = Transaction(
  //     //to: null,
  //     from: credential.address,
  //     data: payload,
  //     //maxGas: 2000000
  //   );
  //   final String transactionId =
  //       await _client.sendTransaction(credential, transaction);
  //   print(transactionId);
  //   print(transaction.toString());
  // }
  //
  // //deploy using java script
  //
  // Future<void> deployJS() async {
  //   return;
  // }
  //
  // dynamic testDeploy() async {
  //   final jsFile = await path;
  //
  //   JsEvalResult jsEvalResult =
  //       runtime.evaluate("""${jsFile}test""");
  //
  //   print(int.parse(jsEvalResult.stringResult));
  // }

  Future<bool> register(String publicKey, String privateKey, String username,
      String contractAddress) async {
    try {
      var uri = Uri.https(
          'https://2ad0-2401-dd00-10-20-9cf0-c065-e15e-3429.ngrok-free.app',
          'node-contract/deploy');

      var map = new Map<String, dynamic>();
      map['publicKey'] = publicKey;
      map['privateKey'] = privateKey;
      map['username'] = username;
      map['contractAddress'] = contractAddress;

      final response = await http.post(uri, body: map);

      if (response.statusCode == 200) {
        bool userNameExistence = json.decode(response.body)["result"];
        return userNameExistence;
      }
    } catch (e) {
      print(e.toString());
      return false;
    }
    return false;
  }

  Future<String> generateMnemonicForNewAccount() async {
    try {
      var uri = Uri.https(
          'https://2ad0-2401-dd00-10-20-9cf0-c065-e15e-3429.ngrok-free.app',
          'key-generation/generateMnemonicForNewAccount');

      var map = new Map<String, dynamic>();
      // map['publicKey'] = publicKey;
      // map['privateKey'] = privateKey;
      // map['username'] = username;
      // map['contractAddress'] = contractAddress;

      final response = await http.get(uri);

      if (response.statusCode == 200) {
        String mnemonic = json.decode(response.body)["result"];
        return mnemonic;
      }
    } catch (e) {
      print(e.toString());
      return "false";
    }
    return "false";
  }

  Future<List<String>> importWalletFromMnemonic(String mnemonic) async {
    try {
      var uri = Uri.https(
          'https://2ad0-2401-dd00-10-20-9cf0-c065-e15e-3429.ngrok-free.app',
          'key-generation/import-wallet-from-mnemonic');

      var map = new Map<String, dynamic>();
      map['mnemonic'] = mnemonic;
      //map['privateKey'] = privateKey;
      // map['username'] = username;
      // map['contractAddress'] = contractAddress;

      final response = await http.post(uri, body: map);

      if (response.statusCode == 200) {
        List<String> prv_pub = json.decode(response.body)["result"];
        return prv_pub;
      }
    } catch (e) {
      print(e.toString());
    }
    return [];
  }

  Future<String> mnemonicToEntropy(String mnemonic) async {
    try {
      var uri = Uri.https(
          'https://2ad0-2401-dd00-10-20-9cf0-c065-e15e-3429.ngrok-free.app',
          'key-generation/mnemonic-to-entropy');

      var map = new Map<String, dynamic>();
      map['mnemonic'] = mnemonic;
      //map['privateKey'] = privateKey;
      // map['username'] = username;
      // map['contractAddress'] = contractAddress;

      final response = await http.post(uri, body: map);

      if (response.statusCode == 200) {
        String entropy = json.decode(response.body)["result"];
        return entropy;
      }
    } catch (e) {
      print(e.toString());

    }
    return "false";
  }
  Future<String> getContractAddressByPublicAddress(String publicKey,String privateKey) async {
    try {
      var uri = Uri.https(
          'https://2ad0-2401-dd00-10-20-9cf0-c065-e15e-3429.ngrok-free.app',
          'public-contract/get-contract-address-by-public-address');

      var map = new Map<String, dynamic>();
      map['publicKey'] = publicKey;
      map['privateKey'] = privateKey;
      // map['username'] = username;
      // map['contractAddress'] = contractAddress;

      final response = await http.post(uri, body: map);

      if (response.statusCode == 200) {
        String entropy = json.decode(response.body)["result"];
        return entropy;
      }
    } catch (e) {
      print(e.toString());

    }
    return "false";
  }

  Future<String> getUserName(String publicKey,String privateKey) async {
    try {
      var uri = Uri.https(
          'https://2ad0-2401-dd00-10-20-9cf0-c065-e15e-3429.ngrok-free.app',
          'node-contract/user-name');

      var map = new Map<String, dynamic>();
      map['publicKey'] = publicKey;
      map['privateKey'] = privateKey;
      // map['username'] = username;
      // map['contractAddress'] = contractAddress;

      final response = await http.post(uri, body: map);

      if (response.statusCode == 200) {
        String entropy = json.decode(response.body)["result"];
        return entropy;
      }
    } catch (e) {
      print(e.toString());

    }
    return "false";
  }
  Future<bool> checkUserExists(String publicKey,String privateKey) async {
    try {
      var uri = Uri.https(
          'https://2ad0-2401-dd00-10-20-9cf0-c065-e15e-3429.ngrok-free.app',
          'public-contract/check-user-exists');

      var map = new Map<String, dynamic>();
      map['publicKey'] = publicKey;
      map['privateKey'] = privateKey;
      // map['username'] = username;
      // map['contractAddress'] = contractAddress;

      final response = await http.post(uri, body: map);

      if (response.statusCode == 200) {
        bool existance = json.decode(response.body)["result"];
        return existance;
      }
    } catch (e) {
      print(e.toString());

    }
    return false;
  }
// generateMnemonicForNewAccount
// importWalletFromMnemonic
// mnemonicToEntropy
// getContractAddressByPublicAddress
// getUserName
// checkUserExists
// deploy
// register
}
